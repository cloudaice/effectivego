# Effectiv Go（一）
@(Go)[Go]

- 简介
  - 例子
- 格式

## 简介

Go是一个新的语言。虽然是借鉴了现有的语言，但是它独有的特性可以使得高效的Go程序，与其它语言编写的程序相比，大不相同。直接将C++或者Java 程序转换为Go程序，是不可能产生令人满意的结果—Java程序是使用Java编写的，而不是Go。另一方面，从Go的角度考虑问题则会产生成功的，而且大不相同的程序。换句话说，想要编写好的Go程序，理解它的特性和风格是非常重要的。了解Go语言编程中已有的约定也非常重要，例如命名，格式，程序结构，等等。这会使得其他Go程序员容易理解你编写的程序。

该文档对如何编写清晰，符合语言规范的Go代码，给出了一些建议。你应该先阅读language specification，Tour of Go和How to Write Go Code，然后将该文档作为扩展阅读。

### 例子

[Go package sources](http://golang.org/src/pkg)旨在不仅作为核心库来使用，而且还可以作为如何使用语言的例子。此外，许多程序包都包含了可以在[golang.org](http:// golang.ort)网站上独立执行的例子，例如[这个](http://golang.org/pkg/strings/#example_Map)（如果需要，点击单词"Example"来打开）。如果你对如何处理一个问题，或者如何进行实现有疑问，那么库中的文档，代码和例子可以提供答案，概念和背景。

## 格式

格式化是一个最具争议，但又无关紧要的问题。人们可以习惯于不同的格式风格。但是，最好不要这样，如果我们都遵守相同的代码风格，就不用在讨论代码风格上花费时间了。问题是如何在没有一个长效的风格指导下，达到这样美好的乌托邦。

对于Go，我们采取了不同寻常的方式，让机器来处理大多数的格式问题。程序gofmt（也可以用go fmt，其操作于程序包的级别，而不是源文件级别），读入一个Go程序，然后输出按照标准风格进行缩进和垂直对齐的源码，并且保留了根据需要进行重新格式化的注释。如果你想知道如何处理某种新的布局情况，可以运行gofmt；如果答案看起来不正确，则需要重新组织你的程序（或者提交一个关于gofmt的bug），不要把问题绕过去。

举个例子，不需要花费时间对结构体中每个域的注释进行排列。Gofmt将会替你完成这些。给定一个声明

    type T struct {
        name string // name of the object
        value int // its value
    }

gofmt将会按列进行排列：

    type T struct {
        name    string // name of the object
        value   int    // its value
    }

标准程序包中的所有Go代码，都已经使用gofmt进行了格式化。

这里还有一些非常简短的格式化方面的细节：

### 缩进

> 我们使用tab进行缩进，这是gofmt的缺省输出。只有在你必须的时候才使用空格。

### 行长度
> Go没有行长度限制。不必担心会有打孔卡片溢出。如果感觉一行太长，可以折成几行，并额外使用一个tab进行缩进。

### 括号
> Go相比C和Java，很少需要括号：控制结构（if，for，switch）的语法不需要括号。而且，操作符优先级更短，更清晰。例如：
        `x<<8 + y<<16`
这行代码的含义就已经由空格表明了。这不像其它语言。